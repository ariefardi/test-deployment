name: Deploy to GCP VM with Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: GCP_SSH_PRIVATE_KEY

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Secret
        run: |
          echo "Checking if the SSH key is passed"
          echo "${{ secrets.GCP_VM_SSH_KEY }}" | head -n 10  # Only print the first 10 characters for safety
          echo "Exist"

      # Set up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
            echo "${{ secrets.GCP_VM_SSH_KEY }}" > ~/.ssh/github-action-key
            chmod 600 ~/.ssh/github-action-key
            ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts

      # Build Docker image
      - name: Build Docker image
        run: docker build -t my-app:latest .

      # Save the Docker image as a tar file
      - name: Save Docker image
        run: docker save my-app:latest -o my-app.tar

      # Copy the Docker image to the VM
      - name: Copy Docker image to VM
        run: |
          scp -o StrictHostKeyChecking=no my-app.tar ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }}:/home/${{ secrets.GCP_VM_USER }}/

      # Deploy the Docker image on the VM
      - name: Deploy Docker container on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} << 'EOF'
            # Load the Docker image
            docker load -i /home/${{ secrets.GCP_VM_USER }}/my-app.tar
            
            # Stop and remove any existing container
            docker stop my-app || true
            docker rm my-app || true
            
            # Run the new container
            docker run -d --name my-app -p 80:80 my-app:latest
          EOF
